{"version":3,"sources":["cryptocurrencies.png","components/Error.js","hooks/useCurrency.js","hooks/useCrypto.js","components/Form.js","components/Price.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["ErrorMessage","styled","p","Error","message","prototype","PropTypes","string","isRequired","Label","label","SelectCurrency","select","useCurrency","initialState","options","useState","state","setState","onChange","e","target","value","map","option","code","name","array","SelectCrypto","useCrypto","CoinInfo","Name","FullName","Id","object","Button","input","Form","setCurrency","setCrypto","crytoList","setCrytoList","error","setError","currency","SelectCurrencies","crypto","useEffect","a","axios","get","result","data","Data","callAPI","onSubmit","preventDefault","type","func","Result","div","Information","Quote","Price","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Container","Image","img","Heading","h1","App","setResult","loading","setLoading","url","setTimeout","DISPLAY","quoteCrypto","component","src","image","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f12ee82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptocurrencies.51f1d2ed.png\";","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"@emotion/styled\"\n\n\nconst ErrorMessage = styled.p`\n    background-color: #b7322c;\n    padding: 1rem;\n    color: #FFF;\n    font-size: 30px;\n    text-transform: uppercase;\n    font-weight: bold;\n    text-align: center;\n    font-family: \"Bebas Neue\", cursive;\n`\n\nconst Error = ({message}) => {\n    return ( \n        <ErrorMessage>{message}</ErrorMessage>\n    )\n}\n\nError.prototype = {\n    message: PropTypes.string.isRequired\n}\n\nexport default Error","import React, {Fragment, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"@emotion/styled\"\n\n\nconst Label = styled.label`\n    font-family: \"Bebas Neue\", cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`\n\nconst SelectCurrency = styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n`\n\nconst useCurrency = (label, initialState, options) => {\n\n    // Hook state\n    const [state, setState] = useState(initialState)\n\n    const Select = () => (\n        <Fragment>\n            <Label>{label}</Label>\n            <SelectCurrency\n                onChange={e => setState(e.target.value)}\n                value={state}\n            >\n                <option value=\"\">- Select -</option>\n                {options.map(option => (\n                    <option key={option.code} value={option.code}>{option.name}</option>\n                ))}\n            </SelectCurrency>\n        </Fragment>\n    )\n\n    // Return state, ui, interface, and fn that changes state\n    return [state, Select, setState]\n}\n\nuseCurrency.prototype = {\n    label: PropTypes.string.isRequired,\n    initialState: PropTypes.string.isRequired,\n    options: PropTypes.array.isRequired\n}\n\nexport default useCurrency","import React, {Fragment, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"@emotion/styled\"\n\n\nconst Label = styled.label`\n    font-family: \"Bebas Neue\", cursive;\n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.4rem;\n    margin-top: 2rem;\n    display: block;\n`\n\nconst SelectCrypto = styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n`\n\nconst useCrypto = (label, initialState, options) => {\n\n    // Hook state\n    const [state, setState] = useState(initialState)\n\n    const Select = () => (\n        <Fragment>\n            <Label>{label}</Label>\n            <SelectCrypto\n                onChange={e => setState(e.target.value)}\n                value={state}\n            >\n                <option value=\"MXN\">- Select -</option>\n                {options.map(option => (\n                    <option key={option.CoinInfo.Id} value={option.CoinInfo.Name}>{option.CoinInfo.FullName}</option>\n                ))}\n            </SelectCrypto>\n        </Fragment>\n    )\n\n    // Return state, ui, interface, and fn that changes state\n    return [state, Select, setState]\n}\n\nuseCrypto.prototype = {\n    label: PropTypes.string.isRequired,\n    initialState: PropTypes.string.isRequired,\n    options: PropTypes.object.isRequired\n}\n\nexport default useCrypto","import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"@emotion/styled\"\n\nimport Error from \"./Error\"\nimport useCurrency from \"../hooks/useCurrency\"\nimport useCrypto from \"../hooks/useCrypto\"\nimport axios from 'axios'\n\n\nconst Button = styled.input`\n    margin-top: 20px;\n    font-weight: bold;\n    font-size: 20px;\n    padding: 10px;\n    background-color: #66a2fe;\n    border: none;\n    width: 100%;\n    border-radius: 10px;\n    color: #FFF;\n    transition: background-color .3s ease;\n\n    &:hover {\n        background-color: #326AC0;\n        cursor: pointer;\n    }\n`\n\nconst Form = ({setCurrency, setCrypto}) => {\n\n    // Crypto List State\n    const [crytoList, setCrytoList] = useState([]) \n    const [error, setError] = useState(false)\n\n    const CURRENCIES = [\n        {code: \"USD\", name: \"United States Dollar\"}, \n        {code: \"MXN\", name: \"Mexican Peso\"}, \n        {code: \"EUR\", name: \"Euro\"}, \n        {code: \"GBP\", name: \"Pound Sterling\"},\n        {code: \"CRC\", name: \"Costa Rican Colon\"},\n    ]\n\n    // Use useCurrency custom hook\n    const [currency, SelectCurrencies] = useCurrency(\"Choose your Currency\", \"\", CURRENCIES)\n\n    // Use useCrypto custom hook\n    const [crypto, SelectCrypto] = useCrypto(\"Choose your Crypto\", \"\", crytoList)\n\n    // Call the API\n    useEffect(() => {\n        const callAPI = async () => {\n            const url = \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\"\n            const result = await axios.get(url)\n            setCrytoList(result.data.Data)\n        }\n        callAPI()\n    }, [])\n\n    // On Submit\n    const getPrice = e => {\n        e.preventDefault()\n\n        // Validate both fields\n        if(currency === \"\" || crypto === \"\") {\n            setError(true)\n            return\n        }\n\n        // Send data to main component\n        setError(false)\n        setCurrency(currency)\n        setCrypto(crypto)\n    }\n\n    return (  \n        <form\n            onSubmit={getPrice}\n        >\n            {error ? <Error message=\"All fields are mandatory\" /> : null}\n\n            <SelectCurrencies />\n            <SelectCrypto />\n            <Button \n                type=\"submit\"\n                value=\"Calculate\"\n            />\n        </form>\n    )\n}\n\nForm.prototype = {\n    setCurrency: PropTypes.func.isRequired,\n    setCrypto: PropTypes.func.isRequired\n}\n \nexport default Form","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"@emotion/styled\"\n\n\nconst Result = styled.div`\n    color: #FFF;\n    font-family: Arial, Helvetica, sans-serif;\n`\n\nconst Information = styled.p`\n    font-size: 18px;\n    span {\n        font-weight: bold;\n    }\n`\n\nconst Quote = styled.p`\n    font-size: 30px;\n    span {\n        font-weight: bold;\n    }\n`\n\nconst Price = ({result}) => {\n    if(Object.keys(result).length === 0) return null\n    return ( \n        <Result>\n            <Quote>The price is: <span>{result.PRICE}</span></Quote>\n            <Information>Max day: <span>{result.HIGHDAY}</span></Information>\n            <Information>Min day: <span>{result.LOWDAY}</span></Information>\n            <Information>24 Hour Variation: <span>{result.CHANGEPCT24HOUR}</span></Information>\n            <Information>Last updated: <span>{result.LASTUPDATE}</span></Information>\n        </Result>\n    )\n}\n\nPrice.prototype = {\n    result: PropTypes.object.isRequired\n}\n \nexport default Price","import React from \"react\"\nimport \"./Spinner.css\"\n\n\nconst Spinner = () => {\n    return (\n    <div className=\"spinner\">\n        <div className=\"cube1\"></div>\n        <div className=\"cube2\"></div>\n    </div>\n    )\n}\n \nexport default Spinner","import React, {useState, useEffect} from \"react\"\nimport styled from \"@emotion/styled\"\nimport axios from \"axios\"\nimport image from \"./cryptocurrencies.png\"\nimport Form from \"./components/Form\"\nimport Price from \"./components/Price\"\nimport Spinner from \"./components/Spinner\"\n\n\nconst Container = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media(min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`\n\nconst Image = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #FFF;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &&::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display: block;\n  }\n`\n\nconst App = () => {\n\n  const [currency, setCurrency] = useState(\"\")\n  const [crypto, setCrypto] = useState(\"\")\n  const [result, setResult] = useState({})\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n\n    const quoteCrypto = async () => {\n      // Avoid execution first time\n      if(currency === \"\") return\n\n      // Get price from API\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${crypto}&tsyms=${currency}`\n\n      const result = await axios.get(url)\n\n      // Spinner loading\n      setLoading(true)\n\n      // Hide Spinner and show result\n      setTimeout(() => {\n\n        // Change Spinner State \n        setLoading(false)\n        \n        // Set the price result\n        setResult(result.data.DISPLAY[crypto][currency])\n      }, 2000)\n    }\n    quoteCrypto()\n  }, [currency, crypto])\n\n  // Show Spinner or result\n  const component = loading ? <Spinner /> : <Price result={result} />\n\n  return (\n    <Container>\n      <div>\n        <Image \n          src={image}\n          alt=\"Crypto Image\"\n        />\n      </div>\n      <div>\n        <Heading>Cryto Prices</Heading>\n        \n        <Form \n          setCurrency={setCurrency}\n          setCrypto={setCrypto}\n        />\n\n        {component}\n      </div>\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}